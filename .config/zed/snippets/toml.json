{
  "Lint and type check": {
    "prefix": "lintandtype",
    "body": ["[tool.ruff]\nline-length = 99\n\n[tool.ruff.format]\npreview = true\ndocstring-code-format = true\n\n[tool.ruff.lint]\npreview = true\nselect = [\"E\", \"F\", \"UP\", \"B\", \"SIM\", \"I\"]\nignore = [\"UP007\", \"UP045\", \"E701\", \"SIM108\"]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.basedpyright]\nreportAny = false                   # is this rule a joke?\nreportExplicitAny = false           # is this rule a joke?\ndeprecateTypingAliases = false      # this rule is incorrect as Union and Optional are not deprecated; `Optional[int]` is objectively better than `int | None`\nreportUnknownMemberType = false     # because `v = []; v.append(1)` is perfectly fine and requires no annotations (Rust: `let mut v = Vec::new(); v.push(1);`)\nreportUnknownVariableType = false   # because pyright is too dumb to infer types sometimes\nreportUnknownLambdaType = false     # because pyright is too dumb to infer types sometimes\nreportUnknownArgumentType = false   # to pass variables where pyright can't infer types\nreportUnknownParameterType = false  # to accept `*args`, `**kwargs`\nreportMissingParameterType = false  # to accept `*args`, `**kwargs`\nreportUnusedCallResult = false      # for marimo\nreportPrivateUsage = false          # python does not enforce public/private; if someone types a `_`, they know what they are doing\nreportImportCycles = false          # python does not have forward declarations\nreportUnannotatedClassAttribute = false\nreportImplicitStringConcatenation = false\nreportUnusedParameter = \"hint\"\n\n"]
  }
}
